{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "SlimMom API",
    "description": "API documentation  'Slimmom application'",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://slimmomproject.herokuapp.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints: Signup, Login, Logout"
    },
    {
      "name": "Users",
      "description": "User endpoints: Get current user, Get daily norma, Post daily norma"
    },
    {
      "name": "Diary",
      "description": "Diary endpoints: Add and Delete product, Get information per date"
    },
    {
      "name": "Products",
      "description": "Product search endpoints: Product search in the directory"
    }
  ],

  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email already exists",
            "content": {}
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Login or password is wrong",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Current user info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/users/daily-norma/public": {
      "post": {
        "tags": ["Users"],
        "summary": "Calculate user daily norm: public",
        "parameters": [],
        "requestBody": {
          "description": "User data object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyNormRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyNormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/daily-norma/private": {
      "post": {
        "tags": ["Users"],
        "summary": "Calculate user daily norm",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "User data object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyNormRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyNormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/diary": {
      "get": {
        "tags": ["Diary"],
        "summary": "Info per date",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "description": "Calendar date. Format YYYY-MM-DD"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["Diary"],
        "summary": "Post product to diary",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "description": "Calendar date. Format YYYY-MM-DD"
          }
        ],
        "requestBody": {
          "description": "Object with product's id and weight of product",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Diary"],
        "summary": "Delete product from diary",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "description": "Calendar date. Format YYYY-MM-DD"
          },
          {
            "in": "query",
            "name": "productId",
            "required": true,
            "description": "Id of product"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "message": "Product was delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Product search in the directory",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "description": "Product title"
          },
          {
            "in": "query",
            "name": "limit",
            "default": 10,
            "required": true,
            "description": "Product list limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Product not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["name", "email", "password"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Max"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qweqwe22"
          },
          "userData": {
            "type": "object",
            "description": "User's data from calculator",
            "properties": {
              "currentWeight": {
                "type": "number",
                "description": "User's current weight",
                "example": 50
              },
              "height": {
                "type": "number",
                "description": "User's height",
                "example": 150
              },
              "age": {
                "type": "number",
                "description": "User's age",
                "example": 28
              },
              "desiredWeight": {
                "type": "number",
                "description": "User's desired weight",
                "example": 50
              },
              "bloodType": {
                "type": "number",
                "description": "User's blood type",
                "example": 1
              }
            }
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Max"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "userData": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qweqwe22"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYzljZDYwNjYwMzYyMzVhZmEwMjI2YSIsImlhdCI6MTY1NzM5MzQ0OCwiZXhwIjoxNjU3Mzk3MDQ4fQ.aPCI5e_tT6-EmDvxQPxJwJ-S1-lkD2ae6wXcDAtwJL0"
          },
          "user": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Max"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "userData": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          }
        }
      },
      "ProductsResponse": {
        "type": "array",
        "description": "Products found",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "5d51694802b2373622ff5539"
            },
            "categories": {
              "type": "array",
              "items": { "type": "string", "example": "яйца" }
            },
            "weight": {
              "type": "number",
              "example": 100
            },
            "title": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "62d1e7b719d951dcd8220d54"
                },
                "ua": {
                  "type": "string",
                  "example": "Яйце куряче (варене круто)"
                },
                "en": {
                  "type": "string",
                  "example": "Chicken egg (hard boiled)"
                }
              }
            },
            "calories": {
              "type": "number",
              "example": 160
            },
            "groupBloodNotAllowed": {
              "type": "array",
              "items": {
                "oneOf": [{ "type": "null" }, { "type": "boolean" }]
              },
              "example": [null, true, false, false, false]
            },
            "__v": {
              "type": "number",
              "example": 0
            }
          }
        }
      },
      "DateResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "62ced642cc7cadaf968ca5fd" },
          "date": { "type": "string", "example": "2022-07-13" },
          "owner": { "type": "string", "example": "62cc50b6250e030cb63b5e3e" },
          "consumedProducts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5d51694802b2373622ff55d9"
                },
                "title": {
                  "type": "object",
                  "properties": {
                    "ua": { "type": "string", "example": "Полба" },
                    "en": { "type": "string", "example": "Spelt" }
                  }
                },
                "weight": { "type": "number", "example": 120 },
                "kcal": { "type": "number", "example": 404 }
              }
            }
          },
          "total": { "type": "number", "example": 404 }
        }
      },
      "ProductRequest": {
        "required": ["id", "weight"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5d51694802b2373622ff5530"
          },
          "weight": {
            "type": "number",
            "example": 50
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "5d51694802b2373622ff5530" },
          "title": {
            "type": "object",
            "properties": {
              "ua": { "type": "string", "example": "Омлет із сиром" },
              "en": { "type": "string", "example": "Omelet with cheese" }
            }
          },
          "weight": { "type": "number", "example": 50 },
          "kcal": { "type": "number", "example": 171 }
        }
      },
      "DailyNormRequest": {
        "required": [
          "currentWeight",
          "height",
          "age",
          "desiredWeight",
          "bloodType"
        ],
        "type": "object",
        "properties": {
          "currentWeight": {
            "type": "number",
            "description": "User's current weight",
            "example": 50
          },
          "height": {
            "type": "number",
            "description": "User's height",
            "example": 150
          },
          "age": {
            "type": "number",
            "description": "User's age",
            "example": 28
          },
          "desiredWeight": {
            "type": "number",
            "description": "User's desired weight",
            "example": 50
          },
          "bloodType": {
            "type": "number",
            "description": "User's blood type",
            "enum": [1, 2, 3, 4],
            "example": 1
          }
        }
      },
      "DailyNormResponse": {
        "type": "object",
        "properties": {
          "dailyRate": {
            "type": "number",
            "description": "User's daily rate",
            "example": 2500
          },
          "bannedProducts": {
            "$ref": "#/components/schemas/BannedProducts"
          }
        }
      },
      "UserData": {
        "description": "User's data",
        "type": "object",
        "properties": {
          "currentWeight": {
            "type": "number",
            "description": "User's current weight",
            "example": 50
          },
          "height": {
            "type": "number",
            "description": "User's height",
            "example": 150
          },
          "age": {
            "type": "number",
            "description": "User's age",
            "example": 28
          },
          "desiredWeight": {
            "type": "number",
            "description": "User's desired weight",
            "example": 50
          },
          "bloodType": {
            "type": "number",
            "description": "User's blood type",
            "example": 1
          },
          "dailyRate": {
            "type": "number",
            "description": "User's daily rate",
            "example": 2500
          },
          "bannedProducts": {
            "$ref": "#/components/schemas/BannedProducts"
          }
        }
      },
      "BannedProducts": {
        "type": "object",
        "description": "Banned products object",
        "properties": {
          "categories": {
            "type": "object",
            "description": "Product categories",
            "properties": {
              "яйца": {
                "type": "object",
                "description": "Product category",
                "properties": {
                  "products": {
                    "type": "array",
                    "description": "Array of products",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "62d1ca1e7223099e3ece947a"
                            },
                            "ua": {
                              "type": "string",
                              "example": "Яйце куряче (варене круто)"
                            },
                            "en": {
                              "type": "string",
                              "example": "Chicken egg (hard boiled)"
                            }
                          }
                        },
                        "_id": {
                          "type": "string",
                          "example": "5d51694802b2373622ff5539"
                        }
                      }
                    }
                  },
                  "total": {
                    "type": "number",
                    "example": 150
                  },
                  "totalInBase": {
                    "type": "number",
                    "example": 650
                  }
                }
              }
            }
          },
          "total": {
            "type": "number",
            "example": 989
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
